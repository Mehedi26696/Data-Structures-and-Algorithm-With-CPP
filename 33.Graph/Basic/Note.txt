
// Graph is a data structure that consists of following two components:
// 1. A finite set of vertices also called as nodes.
// 2. A finite set of ordered pair of the form (u, v) called as edge. The pair is ordered because (u, v) is not same as (v, u) in case of directed graph(di-graph).
// The pair of form (u, v) indicates that there is an edge from vertex u to vertex v. The edges may contain weight/value/cost.

// Graphs are used to solve many real-life problems. Graphs are used to represent networks. The networks may include paths in a city or telephone network or circuit network.
// Graphs are also used in social networks like linkedIn, Facebook. For example, in Facebook, each person is represented with a vertex(or node). 
//Each node is a structure and contains information like person id, name

// Graphs are used in google maps. We can find the shortest path from one place to another using graphs.

// Graphs are used in GPS to find the shortest path to your destination.

// Graphs are used in Facebook to find friends or friends of friends.

// Graphs are also used in neural networking.

// Graphs are used in many applications like image processing, video games, traffic control system, etc.

// Graphs are used in recommendation systems like Amazon, Netflix, etc.


// Graph Representation
// A graph is represented using 3 data structures:
// 1. Adjacency Matrix
// 2. Adjacency List
// 3. Incidence Matrix

// Adjacency Matrix
// Adjacency Matrix is a 2D array of size V x V where V is the number of vertices in a graph. 
//Let the 2D array be adj[][], a slot adj[i][j] = 1 indicates that there is an edge from vertex i to vertex j.
// Adjacency matrix for undirected graph is always symmetric. Adjacency Matrix is also used to represent weighted graphs.
// If adj[i][j] = w, then there is an edge from vertex i to vertex j with weight w.

// The adjacency matrix for the above example graph is:
// 0 1 0 0
// 1 0 1 1
// 0 1 0 1
// 0 1 1 0

// Adjacency List
// An array of lists is used. The size of the array is equal to the number of vertices. Let the array be an array[].
// An entry array[i] represents the list of vertices adjacent to the ith vertex. This representation can also be used to represent a weighted graph.
// The adjacency list for the above example graph is:
// 0 -> 1 -> NULL
// 1 -> 0 -> 2 -> 3 -> NULL
// 2 -> 1 -> 3 -> NULL
// 3 -> 1 -> 2 -> NULL

// Incidence Matrix

// Incidence Matrix is a 2D array of size V x E, where V is the number of vertices in the graph and E is the number of edges in the graph.
// Let the 2D array be inc[][], a slot inc[i][j] = 1 indicates that the vertex i is incident to edge j.
// The incidence matrix for the above example graph is:
// 1 1 0 0
// 1 0 1 1
// 0 1 1 0
// 0 0 0 1


// Graph Traversal
// The graph traversal is the process of visiting all the vertices of the graph. The graph traversal is of two types:
// 1. Breadth First Traversal (BFS)
// 2. Depth First Traversal (DFS)

// Breadth First Traversal (BFS)

// Breadth First Traversal (or Search) for a graph is similar to Breadth First Traversal of a tree. The only catch here is, unlike trees, graphs may contain cycles,
// so we may come to the same node again. To avoid processing a node more than once, we use a boolean visited array. For simplicity, it is assumed that all vertices are
// reachable from the starting vertex.

// Breadth First Traversal of the above graph is 0, 1, 2, 3

// Depth First Traversal (DFS)
// Depth First Traversal (or Search) for a graph is similar to Depth First Traversal of a tree. The only catch here is, unlike trees, graphs may contain cycles,
// so we may come to the same node again. To avoid processing a node more than once, we use a boolean visited array. For simplicity, it is assumed that all vertices are
// reachable from the starting vertex.

// Depth First Traversal of the above graph is 0, 1, 2, 3

// Applications of Depth First Traversal
// 1. For a weighted graph, DFS traversal of the graph produces the minimum spanning tree and all pair shortest path tree.
// 2. Detecting cycle in a graph
// 3. Path Finding
// 4. Topological Sorting
// 5. To test if a graph is bipartite

// Applications of Breadth First Traversal
// 1. Shortest Path and Minimum Spanning Tree for unweighted graph
// 2. Peer to Peer Networks like BitTorrent
// 3. Crawlers in Search Engines
// 4. Social Networking Websites

// The implementation of BFS and DFS is similar with a little difference. The difference is that BFS uses a queue data structure for storing 
// the nodes whereas DFS uses recursion for traversal of the graph.

// The time complexity of both BFS and DFS is O(V + E), where V is the number of vertices and E is the number of edges in the graph.
// The space complexity of the BFS is O(V) and for DFS is O(V), where V is the number of vertices in the graph.


 
 

 




